package ${package}.controller;

import java.util.HashMap;
import com.google.gson.Gson;
import com.suke.czx.common.utils.*;
import java.util.List;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import ${package}.service.${moduleName}.${className}Service;
import javax.annotation.Resource;


/**
 * ${comments}
 * 
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Api(value = "API - ${className}Controller ", description = "${comments}")
@RestController
@RequestMapping("/app")
public class ${className}Controller {

    private org.slf4j.Logger logger = LoggerFactory.getLogger(getClass());

    @Resource(name = "${classname}Service")
	private ${className}Service ${classname}Service;
	
	/**
	 * 列表
	 */
    @ApiOperation(value="列表", notes="列表")
    @ApiImplicitParams({@ApiImplicitParam(name = "token", value = "token", required = true,dataType = "string", paramType = "query", defaultValue = "")})
	@PostMapping("/${moduleName}/list")
	public AppBaseResult list(@RequestBody AppBaseResult appBaseResult)throws Exception{
        logger.info("${className}Controller 列表",appBaseResult.decryptData());
        HashMap<String,Object> params = new Gson().fromJson(appBaseResult.decryptData(),HashMap.class);
		//查询列表数据
        Query query = new Query(params);
        query.isPaging(true);
		List<HashMap<String,Object>> ${classname}List = ${classname}Service.queryList(query);
		PageUtils pageUtil = new PageUtils(${classname}List, query.getTotle(), query.getLimit(), query.getPage());
        return AppBaseResult.success().setEncryptData(pageUtil);
	}
	
	
	/**
	 * 信息
	 */
    @ApiOperation(value="信息", notes="信息")
    @ApiImplicitParams({@ApiImplicitParam(name = "token", value = "token", required = true,dataType = "string", paramType = "query", defaultValue = "")})
	@PostMapping("/${moduleName}/info")
	public AppBaseResult info(@RequestBody AppBaseResult appBaseResult)throws Exception{
        logger.info("${className}Controller 信息",appBaseResult.decryptData());
        HashMap<String,Object> params = new Gson().fromJson(appBaseResult.decryptData(),HashMap.class);
        HashMap<String,Object> data = ${classname}Service.queryObject(params);
        return AppBaseResult.success().setEncryptData(data);
	}
	
	/**
	 * 保存
	 */
    @ApiOperation(value="保存", notes="保存")
    @ApiImplicitParams({@ApiImplicitParam(name = "token", value = "token", required = true,dataType = "string", paramType = "query", defaultValue = "")})
	@PostMapping("/${moduleName}/save")
	public AppBaseResult save(@RequestBody AppBaseResult appBaseResult)throws Exception{
        logger.info("${className}Controller 保存",appBaseResult.decryptData());
        HashMap<String,Object> params = new Gson().fromJson(appBaseResult.decryptData(),HashMap.class);
		${classname}Service.saveInfo(params);
        return AppBaseResult.success();
	}
	
	/**
	 * 修改
	 */
    @ApiOperation(value="修改", notes="修改")
    @ApiImplicitParams({@ApiImplicitParam(name = "token", value = "token", required = true,dataType = "string", paramType = "query", defaultValue = "")})
	@PostMapping("/${moduleName}/update")
	public AppBaseResult update(@RequestBody AppBaseResult appBaseResult)throws Exception{
        logger.info("${className}Controller 修改",appBaseResult.decryptData());
        HashMap<String,Object> params = new Gson().fromJson(appBaseResult.decryptData(),HashMap.class);
		${classname}Service.updateInfo(params);
        return AppBaseResult.success();
	}
	
	/**
	 * 删除
	 */
    @ApiOperation(value="删除", notes="删除")
    @ApiImplicitParams({@ApiImplicitParam(name = "token", value = "token", required = true,dataType = "string", paramType = "query", defaultValue = "")})
	@PostMapping("/${moduleName}/delete")
	public AppBaseResult delete(@RequestBody AppBaseResult appBaseResult)throws Exception{
        logger.info("${className}Controller 修改",appBaseResult.decryptData());
        HashMap<String,Object> params = new Gson().fromJson(appBaseResult.decryptData(),HashMap.class);
		${classname}Service.deleteInfo(params);
        return AppBaseResult.success();
	}
	
}
